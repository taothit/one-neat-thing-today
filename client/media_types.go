// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "Discovery": Application Media Types
//
// Command:
// $ goagen
// --design=douthitlab.edu/one-new-thing-today/design
// --out=$(GOPATH)/src/douthitlab.edu/one-new-thing-today
// --version=v1.3.1

package client

import (
	"net/http"
	"time"
)

// NewThing media type (default view)
//
// Identifier: application/vnd.douthitlab.newthing; view=default
type NewThing struct {
	// What the new thing is
	Definition *string `form:"definition,omitempty" json:"definition,omitempty" yaml:"definition,omitempty" xml:"definition,omitempty"`
	// Illustrative link for the new thing
	Link *string `form:"link,omitempty" json:"link,omitempty" yaml:"link,omitempty" xml:"link,omitempty"`
	// The new thing
	Name *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
}

// NewThing media type (full view)
//
// Identifier: application/vnd.douthitlab.newthing; view=full
type NewThingFull struct {
	Bibliography []string `form:"bibliography,omitempty" json:"bibliography,omitempty" yaml:"bibliography,omitempty" xml:"bibliography,omitempty"`
	// When this was a new thing
	Date *time.Time `form:"date,omitempty" json:"date,omitempty" yaml:"date,omitempty" xml:"date,omitempty"`
	// What the new thing is
	Definition *string `form:"definition,omitempty" json:"definition,omitempty" yaml:"definition,omitempty" xml:"definition,omitempty"`
	// Illustrative link for the new thing
	Link *string `form:"link,omitempty" json:"link,omitempty" yaml:"link,omitempty" xml:"link,omitempty"`
	// The new thing
	Name *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
}

// NewThing media type (name view)
//
// Identifier: application/vnd.douthitlab.newthing; view=name
type NewThingName struct {
	// The new thing
	Name *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
}

// NewThing media type (name+definition view)
//
// Identifier: application/vnd.douthitlab.newthing; view=name+definition
type NewThingNameDefinition struct {
	// What the new thing is
	Definition *string `form:"definition,omitempty" json:"definition,omitempty" yaml:"definition,omitempty" xml:"definition,omitempty"`
	// The new thing
	Name *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
}

// NewThing media type (name+link view)
//
// Identifier: application/vnd.douthitlab.newthing; view=name+link
type NewThingNameLink struct {
	// Illustrative link for the new thing
	Link *string `form:"link,omitempty" json:"link,omitempty" yaml:"link,omitempty" xml:"link,omitempty"`
	// The new thing
	Name *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
}

// DecodeNewThing decodes the NewThing instance encoded in resp body.
func (c *Client) DecodeNewThing(resp *http.Response) (*NewThing, error) {
	var decoded NewThing
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// DecodeNewThingFull decodes the NewThingFull instance encoded in resp body.
func (c *Client) DecodeNewThingFull(resp *http.Response) (*NewThingFull, error) {
	var decoded NewThingFull
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// DecodeNewThingName decodes the NewThingName instance encoded in resp body.
func (c *Client) DecodeNewThingName(resp *http.Response) (*NewThingName, error) {
	var decoded NewThingName
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// DecodeNewThingNameDefinition decodes the NewThingNameDefinition instance encoded in resp body.
func (c *Client) DecodeNewThingNameDefinition(resp *http.Response) (*NewThingNameDefinition, error) {
	var decoded NewThingNameDefinition
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// DecodeNewThingNameLink decodes the NewThingNameLink instance encoded in resp body.
func (c *Client) DecodeNewThingNameLink(resp *http.Response) (*NewThingNameLink, error) {
	var decoded NewThingNameLink
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}
