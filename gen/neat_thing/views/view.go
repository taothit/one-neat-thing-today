// Code generated by goa v3.0.2, DO NOT EDIT.
//
// neatThing views
//
// Command:
// $ goa gen github.com/taothit/one-neat-thing-today/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// NeatThing is the viewed result type that is projected based on a view.
type NeatThing struct {
	// Type to project
	Projected *NeatThingView
	// View to render
	View string
}

// NeatThingView is a type that runs validations on a projected type.
type NeatThingView struct {
	// The neat thing
	Name *string
	// What the neat thing is
	Definition *string
	// Illustrative link for the neat thing
	Link *string
	// When this was a neat thing
	Date         *string
	Bibliography []string
}

var (
	// NeatThingMap is a map of attribute names in result type NeatThing indexed by
	// view name.
	NeatThingMap = map[string][]string{
		"default": []string{
			"name",
			"definition",
			"link",
		},
		"full": []string{
			"name",
			"definition",
			"link",
			"date",
			"bibliography",
		},
		"name": []string{
			"name",
		},
		"name+definition": []string{
			"name",
			"definition",
		},
		"name+link": []string{
			"name",
			"link",
		},
	}
)

// ValidateNeatThing runs the validations defined on the viewed result type
// NeatThing.
func ValidateNeatThing(result *NeatThing) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateNeatThingView(result.Projected)
	case "full":
		err = ValidateNeatThingViewFull(result.Projected)
	case "name":
		err = ValidateNeatThingViewName(result.Projected)
	case "name+definition":
		err = ValidateNeatThingViewNameDefinition(result.Projected)
	case "name+link":
		err = ValidateNeatThingViewNameLink(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default", "full", "name", "name+definition", "name+link"})
	}
	return
}

// ValidateNeatThingView runs the validations defined on NeatThingView using
// the "default" view.
func ValidateNeatThingView(result *NeatThingView) (err error) {
	if result.Link != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.link", *result.Link, goa.FormatURI))
	}
	return
}

// ValidateNeatThingViewFull runs the validations defined on NeatThingView
// using the "full" view.
func ValidateNeatThingViewFull(result *NeatThingView) (err error) {
	if result.Link != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.link", *result.Link, goa.FormatURI))
	}
	if result.Date != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.date", *result.Date, goa.FormatDateTime))
	}
	return
}

// ValidateNeatThingViewName runs the validations defined on NeatThingView
// using the "name" view.
func ValidateNeatThingViewName(result *NeatThingView) (err error) {

	return
}

// ValidateNeatThingViewNameDefinition runs the validations defined on
// NeatThingView using the "name+definition" view.
func ValidateNeatThingViewNameDefinition(result *NeatThingView) (err error) {

	return
}

// ValidateNeatThingViewNameLink runs the validations defined on NeatThingView
// using the "name+link" view.
func ValidateNeatThingViewNameLink(result *NeatThingView) (err error) {
	if result.Link != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.link", *result.Link, goa.FormatURI))
	}
	return
}
