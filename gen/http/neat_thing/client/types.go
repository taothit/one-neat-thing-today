// Code generated by goa v3.0.2, DO NOT EDIT.
//
// neatThing HTTP client types
//
// Command:
// $ goa gen github.com/taothit/one-neat-thing-today/design

package client

import (
	neatthing "github.com/taothit/one-neat-thing-today/gen/neat_thing"
	goa "goa.design/goa/v3/pkg"
)

// NeatThingTodayResponseBody is the type of the "neatThing" service
// "neatThingToday" endpoint HTTP response body.
type NeatThingTodayResponseBody struct {
	// The neat thing
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// What the neat thing is
	Definition *string `form:"definition,omitempty" json:"definition,omitempty" xml:"definition,omitempty"`
	// Illustrative link for the neat thing
	Link *string `form:"link,omitempty" json:"link,omitempty" xml:"link,omitempty"`
	// When this was a neat thing
	Date         *string  `form:"date,omitempty" json:"date,omitempty" xml:"date,omitempty"`
	Bibliography []string `form:"bibliography,omitempty" json:"bibliography,omitempty" xml:"bibliography,omitempty"`
}

// NewNeatThingTodayNeatThingNoContent builds a "neatThing" service
// "neatThingToday" endpoint result from a HTTP "NoContent" response.
func NewNeatThingTodayNeatThingNoContent(body *NeatThingTodayResponseBody) *neatthing.NeatThing {
	v := &neatthing.NeatThing{
		Name:       body.Name,
		Definition: body.Definition,
		Link:       body.Link,
		Date:       body.Date,
	}
	if body.Bibliography != nil {
		v.Bibliography = make([]string, len(body.Bibliography))
		for i, val := range body.Bibliography {
			v.Bibliography[i] = val
		}
	}
	return v
}

// ValidateNeatThingTodayResponseBody runs the validations defined on
// NeatThingTodayResponseBody
func ValidateNeatThingTodayResponseBody(body *NeatThingTodayResponseBody) (err error) {
	if body.Link != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.link", *body.Link, goa.FormatURI))
	}
	if body.Date != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.date", *body.Date, goa.FormatDateTime))
	}
	return
}
