// Code generated by goa v3.0.2, DO NOT EDIT.
//
// neatThing HTTP server
//
// Command:
// $ goa gen github.com/taothit/one-neat-thing-today/design

package server

import (
	"context"
	"net/http"

	neatthing "github.com/taothit/one-neat-thing-today/gen/neat_thing"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the neatThing service endpoint HTTP handlers.
type Server struct {
	Mounts         []*MountPoint
	NeatThingToday http.Handler
	NewNeatThing   http.Handler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the neatThing service endpoints.
func New(
	e *neatthing.Endpoints,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"NeatThingToday", "GET", "/neat/thing/today"},
			{"NewNeatThing", "POST", "/neat/thing"},
			{"../../gen/http/openapi.json", "GET", "/openapi.json"},
		},
		NeatThingToday: NewNeatThingTodayHandler(e.NeatThingToday, mux, dec, enc, eh),
		NewNeatThing:   NewNewNeatThingHandler(e.NewNeatThing, mux, dec, enc, eh),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "neatThing" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.NeatThingToday = m(s.NeatThingToday)
	s.NewNeatThing = m(s.NewNeatThing)
}

// Mount configures the mux to serve the neatThing endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountNeatThingTodayHandler(mux, h.NeatThingToday)
	MountNewNeatThingHandler(mux, h.NewNeatThing)
	MountGenHTTPOpenapiJSON(mux, http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		http.ServeFile(w, r, "../../gen/http/openapi.json")
	}))
}

// MountNeatThingTodayHandler configures the mux to serve the "neatThing"
// service "neatThingToday" endpoint.
func MountNeatThingTodayHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/neat/thing/today", f)
}

// NewNeatThingTodayHandler creates a HTTP handler which loads the HTTP request
// and calls the "neatThing" service "neatThingToday" endpoint.
func NewNeatThingTodayHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		encodeResponse = EncodeNeatThingTodayResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "neatThingToday")
		ctx = context.WithValue(ctx, goa.ServiceKey, "neatThing")

		res, err := endpoint(ctx, nil)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountNewNeatThingHandler configures the mux to serve the "neatThing" service
// "newNeatThing" endpoint.
func MountNewNeatThingHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/neat/thing", f)
}

// NewNewNeatThingHandler creates a HTTP handler which loads the HTTP request
// and calls the "neatThing" service "newNeatThing" endpoint.
func NewNewNeatThingHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeNewNeatThingRequest(mux, dec)
		encodeResponse = EncodeNewNeatThingResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "newNeatThing")
		ctx = context.WithValue(ctx, goa.ServiceKey, "neatThing")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountGenHTTPOpenapiJSON configures the mux to serve GET request made to
// "/openapi.json".
func MountGenHTTPOpenapiJSON(mux goahttp.Muxer, h http.Handler) {
	mux.Handle("GET", "/openapi.json", h.ServeHTTP)
}
